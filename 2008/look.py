# This file was *autogenerated* from the file /home/bork/work/sage/look.sage.
from sage.all_cmdline import *   # import sage library
def valid_params(n):
	list = []
	conferences = []
	for n in range(Integer(1),n):
		print n
		for k in range(Integer(1),(n+Integer(1))/Integer(2)):
			if (k * (k-Integer(1)) < (n-k-Integer(1))):
				continue
			if is_odd(k*n): # then the graph isn't even regular
				continue
			for a in range(k-Integer(1)):
				if is_odd(k*a):
					continue
				if (k * (k - a - Integer(1)) % (n-k-Integer(1)) != Integer(0)): # c isn't an integer
					continue
				c = (k * (k-a-Integer(1)) / (n-k-Integer(1)))
				disc = Integer((a-c)**Integer(2) + Integer(4) * (k-c))
				o = (a-c) + sqrt(disc)
				t = (a-c) - sqrt(disc)
				if (Integer(2)*k + (n-Integer(1)) * (a-c) != Integer(0)) and not (disc.is_square()):
					continue
				m_theta = Integer(1)/Integer(2) * ((n-Integer(1)) - (Integer(2)*k + (n-Integer(1))*(a-c)) / disc.sqrt())
				m_tau = Integer(1)/Integer(2) * ((n-Integer(1)) + (Integer(2)*k + (n-Integer(1))*(a-c)) / disc.sqrt())
				if (Integer(2)*k + (n-Integer(1)) * (a-c) == Integer(0)):
					m_theta = (n-Integer(1))/Integer(2)
					m_tau = (n-Integer(1))/Integer(2)
					if (m_theta.is_integral()):
						conferences.append((n,k,a,c,o, t))
						continue
				if not ( m_theta.is_integral()):
					continue
				list.append((n,k,a,c,o, t))
	return (list, conferences)

def non_conf(r):
	list = []
	for n in range(Integer(1),r):
		for k in range(Integer(1),(n+Integer(1))/Integer(2)):
			if (k * (k-Integer(1)) < (n-k-Integer(1))):
				continue
			if is_odd(k*n):
				continue
			for o in range(Integer(1),k):
				if ( ((-k*o - k*n + k**Integer(2)) % ((n-Integer(1)) * o + k) ) != Integer(0)):
					continue # tau isn't integral
				t = ((-k*o - k*n + k**Integer(2)) / ((n-Integer(1)) * o + k))
				if (k*(k-t) * (t+Integer(1)) %( (k+o*t) * (t-o)) != Integer(0)):
					continue # m_theta isn't integral
				m_theta = k*(k-t) * (t+Integer(1)) / (k+o*t) / (t-o)
				c = k+o*t
				a =  o + t + c
				if (k == (n-Integer(1))/Integer(2) and c == k/Integer(2) and a == c-Integer(1)):
					continue
				if (a < Integer(0)):
					continue
				list.append(dict(a=a, k=k, n=n, c=c, theta = o, tau = t))
	return list

def is_odd(c):
	return (c % Integer(2) == Integer(1))

def is_krein((n,k,a,c)):
	disc =  Integer((a-c)**Integer(2) + Integer(4) * (k-c))
	o = ((a-c) + disc.sqrt()) / Integer(2)
	t  = ((a-c) - disc.sqrt()) / Integer(2)
	if (o*t**Integer(2) - Integer(2)*o**Integer(2)*t - o**Integer(2) - k*o + k*t**Integer(2) + Integer(2)*k*t < Integer(0)):
		return Integer(0)
	if (t*o**Integer(2) - Integer(2)*t**Integer(2)*o - t**Integer(2) - k*t + k*o**Integer(2) + Integer(2)*k*o < Integer(0)):
		return Integer(0)
	return Integer(1)


